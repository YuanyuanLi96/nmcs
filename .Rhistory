result$hat_prob
?tune.fit
result$hat_M$beta
?glm
?predict
result$hat_M$sigmasq
devtools::document()
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
library(nmcs)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
result$hat_M$var_M
devtools::document()
library(nmcs)
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
?NMCS
?plot
devtools::document()
library(nmcs)
?NMCS
devtools::document()
library(nmcs)
?NMCS
devtools::document()
library(nmcs)
?NMCS
devtools::document()
library(nmcs)
?NMCS
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
?output_NMCS
devtools::document()
n=50
p=10
library(nmcs)
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
result$mcs
result$hat_M$var.order
length(result$hat_M$var.order)
library(nmcs)
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
output_NMCS
result$hat_M$var.order
length(result$hat_M$var.order)
result$mcs
output_NMCS(result,alpha=alpha)
?output_NMCS
?NMCS
?output_NMCS
?NMCS
devtools::document()
library(nmcs)
?NMCS
?output_NMCS
devtools::document()
library(nmcs)
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
?nmcs
?NMCS
devtools::document()
library(nmcs)
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
result=NMCS(Y, X, family="gam",alpha=alpha)
output_NMCS(result,alpha=alpha)
devtools::document()
library(nmcs)
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
#Gaussian
Y = X %*% true_b + rnorm(n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n, family = binomial)
#Binomial
Y=Generate_Y(predy, n=n, family = binomial)
Generate_Y
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
n=50
p=10
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = binomial)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha)
warnings()
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha)
output_NMCS(result,alpha=alpha)
n=200
p=100
n=200
p=100
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha)
output_NMCS(result,alpha=alpha)
200^(3/4)
p=50
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
n=200
p=50
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha)
output_NMCS(result,alpha=alpha)
n=100
p=50
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha)
output_NMCS(result,alpha=alpha)
#gam
true.beta = rep(0,p)
true.beta[1:non.zeros] = 1
n=100
p=50
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
output_NMCS(result,alpha=alpha)
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
n=100
p=50
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
debug(output_NMCS)
undebug(output_NMCS)
debug(NMCS)
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
betas
coef.beta
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha,B=B)
undebug(NMCS)
n=100
p=50
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
#gam
X[,2]=-1/3*X[,1]^3+rnorm(n)
result=NMCS(Y, X, family="gam",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
n=200
p=50
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
200^(3/4)
n=100
p=10
100^(3/4)
n=100
p=10
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
#gam
X[,2]=-1/3*X[,1]^3+rnorm(n)
result=NMCS(Y, X, family="gam",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
alpha=c(0.05,0.1,0.3)
result=NMCS(Y, X, family="gam",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
result$hat_logP
Y=Generate_Y(predy, n=n, family = "gam")
result=NMCS(Y, X, family="gam",alpha=alpha, B=B)
#gam
X[,2]=-1/3*X[,1]^3+rnorm(n)
n=100
p=10
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1,0.3)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
#gam
Xn=X
Xn[,2]=-1/3*X[,1]^3+rnorm(n)
p
n=100
p=10
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1,0.3)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
#gam
Xn=X
Xn[,2]=-1/3*X[,1]^3+rnorm(n)
predy_n = Xn %*% true_b
Yn=Generate_Y(predy_n, n=n, family = "gam")
result=NMCS(Yn, Xn, family="gam",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
devtools::document()
library(nmcs)
?NMCS
devtools::document()
library(nmcs)
?NMCS
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#gam
Xn=X
Xn[,2]=-1/3*X[,1]^3+rnorm(n)
predy_n = Xn %*% true_b
Yn=Generate_Y(predy_n, n=n, family = "gam")
result=NMCS(Yn, Xn, family="gam",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
usethis::use_mit_license(name = "Yuanyuan Li")  # permissive sharing
?usethis::use_mit_license
if (!is.null(getOption("usethis.full_name"))) usethis::use_mit_license()
usethis::use_mit_license(name = "Yuanyuan Li")
usethis::use_gpl3_license(name = "Yuanyuan Li") # derivatives must be open
devtools::use_vignette("introduction")
usethis::use_vignette("introduction")
usethis::use_package("gamsel")
usethis::use_package("ncvreg")
usethis::use_package("glmnet")
usethis::use_package("rlist")
devtools::document()
library(nmcs)
data("ndd1")
usethis::use_readme_rmd()
devtools::document()
library(nmcs)
library(nmcs)
## basic example code
set.seed(0)
n=100
p=10
B=200
X = matrix(rnorm(n*p),nrow=n,ncol=p)
true_b = c(1:3, rep(0,p-3))
predy = X %*% true_b
#Gaussian
Y=Generate_Y(predy,sigmasq = 1,n=n)
alpha=c(0.05,0.1,0.3)
result=NMCS(Y, X, alpha=alpha,B=B)
output_NMCS(result,alpha=alpha)
#Binomial
Y=Generate_Y(predy, n=n, family = "binomial")
result=NMCS(Y, X, family="binomial",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
#gam
Xn=X
Xn[,2]=-1/3*X[,1]^3+rnorm(n)
predy_n = Xn %*% true_b
Yn=Generate_Y(predy_n, n=n, family = "gam")
result=NMCS(Yn, Xn, family="gam",alpha=alpha, B=B)
output_NMCS(result,alpha=alpha)
devtools::document()
library(nmcs)
devtools::document()
library(nmcs)
devtools::build_manual()
use_gpl_license()
usethis::use_gpl3_license()
usethis::use_gpl3_license()
usethis::use_gpl3_license()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
use_gpl_license()
usethis::use_gpl3_license()
devtools::build_manual()
setwd("~/paper")
usethis::create_package("~/MAC")
usethis::create_package("~/paper/mac")
diabetes = read.table("https://web.stanford.edu/~hastie/Papers/LARS/diabetes.sdata.txt",skip = 10)
setwd("~/paper/mac/data")
save(diabetes,file="diabetes.RData")
usethis::use_gpl3_license()
devtools::document()
devtools::build_manual()
library(nmcs)
devtools::document()
devtools::build_manual()
library(nmcs)
devtools::document()
devtools::build_manual()
library(nmcs)
devtools::build_manual()
devtools::document()
devtools::build_manual()
library(nmcs)
devtools::document()
devtools::build_manual()
library(nmcs)
devtools::document()
devtools::build_manual()
library(nmcs)
devtools::build_manual()
devtools::document()
devtools::build_manual()
library(nmcs)
devtools::document()
library(nmcs)
devtools::document()
devtools::document()
library(nmcs)
devtools::document()
devtools::document()
library(nmcs)
library(nmcs)
?glmnet
?glmnet::glmnet
?rpql
?rpql::rpql
?glmnet::glmnet
enter.order = function(beta,eps=1e-6){
enterall = factor(apply(beta,1,function(x)which(x>eps)[1]))
#break tie by their value
variable.order=NULL
for (l in levels(enterall)){
vnam= which(enterall==l)
variable.order= c(variable.order,vnam[order(beta[vnam,as.numeric(l)],decreasing = T)])
}
variable.order=c(variable.order, which(is.na(enterall)))
return(variable.order)
}
x = matrix(rnorm(100 * 20), 100, 20)
y = rnorm(100)
fit1 = glmnet(x, y)
library(glmnet)
fit1 = glmnet(x, y)
enter.list(fit1$beta)
enter.order(fit1$beta)
length(enter.order(fit1$beta))
enter.order = function(beta,eps=1e-6){
enterall = factor(apply(beta,1,function(x)which(x>eps)[1]))
#break tie by their value
variable.order=NULL
for (l in levels(enterall)){
vnam= which(enterall==l)
variable.order= c(variable.order,vnam[order(beta[vnam,as.numeric(l)],decreasing = T)])
}
variable.order=c(variable.order, as.numeric(which(is.na(enterall))))
return(variable.order)
}
length(enter.order(fit1$beta))
enter.order(fit1$beta)
x = matrix(rnorm(100 * 10), 100, 10)
y = rnorm(100)
library(glmnet)
fit1 = glmnet(x, y)
enter.order(fit1$beta)
devtools::document()
rm(list = c("enter.order"))
devtools::document()
library(nmcs)
?nmcs::enter.order()
devtools::document()
library(nmcs)
?enter.order
devtools::document()
library(nmcs)
?enter.order
